# Unified Framework BTC-Reduced Classification Configuration
# Uses the unified embedding framework with get_embedding("patched", ...) and get_embedding("hierarchical", ...)
# for Bitcoin entity type classification

# Experiment metadata
experiment:
  name: "Unified_BTC_Reduced_Classification"
  description: "Bitcoin entity classification using unified embedding framework (11 classes)"
  output_dir: "unified_btc_reduced_results"
  
# Dataset configuration
dataset:
  name: "btc-reduced"  # Bitcoin transaction graph with labeled nodes only
  max_nodes: null  # Use all ~34K labeled nodes
  # Optional dataset-specific parameters
  # data_root: "/path/to/dataset"
  # normalize_features: false

# Experimental parameters
parameters:
  dimensions: [32, 64, 128, 256]  # Embedding dimensions to test
  n_runs: 3  # Number of independent runs per configuration
  test_size: 0.2  # Fraction for test set
  random_seed: 42
  
# Classification configuration
classification:
  classifier: "logistic_regression"
  params:
    max_iter: 2000  # More iterations for 11-class problem
    solver: "lbfgs"
    random_state: 42
    multi_class: "ovr"  # One-vs-rest for multi-class
  preprocessing:
    scale_features: true
    # Handle class imbalance (INDIVIDUAL is majority class)
    class_weight: "balanced"

# Embedding methods using unified framework
methods:
  full_graph:
    enabled: true
    description: "VGAE applied to entire BTC graph"
    base_embedding:
      method: "vgae"
      epochs: 150  # More epochs for complex financial graph
      learning_rate: 0.001
      patience: 25
      verbose: false
  
  patched_l2g_rademacher:
    enabled: true
    description: "Unified patched embedding with L2G Rademacher alignment for BTC"
    base_embedding:
      method: "vgae" 
      epochs: 150
      learning_rate: 0.001
      patience: 25
      verbose: false
    patches:
      num_patches: 15  # Moderate patches for ~34K nodes
      clustering_method: "metis"
      min_overlap: 128  # Smaller overlaps for sparse Bitcoin graph
      target_overlap: 256
      sparsify_method: "resistance"
      target_patch_degree: 3  # Lower degree for transaction sparsity
    alignment:
      method: "l2g"
      randomized_method: "randomized"
      sketch_method: "rademacher"
  
  patched_geo:
    enabled: true
    description: "Unified patched embedding with Geo alignment for BTC"
    base_embedding:
      method: "vgae"
      epochs: 150
      learning_rate: 0.001
      patience: 25
      verbose: false
    patches:
      num_patches: 15
      clustering_method: "metis"
      min_overlap: 128
      target_overlap: 256
      sparsify_method: "resistance"
      target_patch_degree: 3
    alignment:
      method: "geo"
      geo_method: "orthogonal"
      num_epochs: 2
      learning_rate: 0.01
      use_scale: true
      use_randomized_init: true
      randomized_method: "randomized"
      verbose: false
  
  hierarchical_unified:
    enabled: true
    description: "Unified hierarchical embedding for BTC with smart alignment selection"
    base_embedding:
      method: "vgae"
      epochs: 150
      learning_rate: 0.001
      patience: 25
      verbose: false
    hierarchical:
      max_patch_size: 1200  # Larger patches for ~34K nodes
      min_overlap: 256  # Increased from 64 for sparse graph
      target_overlap: 512  # Increased from 128 for better connectivity

  # GraphSAGE removed - performs poorly on sparse BTC graph
  # The extreme sparsity (0.04% edge density) prevents effective neighborhood aggregation

# Plotting configuration
plotting:
  save_formats: ["pdf", "png"]
  figure_size: [16, 10]
  dpi: 300
  style: "default"
  colors: ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"]  # 4 colors for 4 methods
  
# Output configuration
output:
  save_raw_results: true
  save_summary: true
  save_plots: true
  save_report: true

# Bitcoin-specific evaluation
evaluation:
  # Multi-class metrics
  metrics: ["accuracy", "precision", "recall", "f1_score"]
  average_methods: ["macro", "weighted"]  # Important for imbalanced Bitcoin classes
  
  # Detailed analysis
  save_confusion_matrix: true
  per_class_results: true
  
  # Financial crime detection focus
  priority_classes: ["EXCHANGE", "MIXER", "RANSOMWARE", "PONZI"]
  
  # Class distribution analysis
  analyze_class_distribution: true