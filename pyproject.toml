[build-system]
requires = ['setuptools>=40.8.0']
build-backend = 'setuptools.build_meta'

[tool.setuptools.packages.find]
where = ["."]

[project]
name = "l2gx"
version = "0.1.0"
authors = [
  { name="Martin Lotz", email="martin.lotz@warwick.ac.uk" }
]
description = "Infer global embeddings from local graph embeddings trained in parallel"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD 3-Clause License",
    "Operating System :: OS Independent",
]

dependencies = [
    "autograd ~= 1.7",
    "datashader>=0.18.1",
    "geotorch",
    "ilupp == 1.0.*",
    "imblearn>=0.0",
    "networkx>=2.0",
    "numba",
    "numpy",
    "ogb>=1.3.6",
    "polars",
    "psycopg2>=2.9.10",
    "pymanopt ~= 2.2",
    "pymetis",
    "python-louvain == 0.16", # imported as 'community'
    "raphtory",
    "scikit-learn",
    "scipy",
    "seaborn>=0.13.2",
    "torch>=2.5",
    "torch-geometric>=2.6",
    "tqdm >= 4",
    "umap-learn",
]

[project.optional-dependencies]
dev = [
    "pytest >= 8",
    "pytest-cov",
    "pytest-xdist",
    "pylint",
    "ruff >= 0.1.0",
]
docs = [
    "Sphinx == 8.*",
    "sphinx-markdown-builder==0.6.*",
    "myst-parser >= 4",
    "pydata-sphinx-theme"
]

[project.urls]
"Homepage" = "https://github.com/OxfordRSE/L2GX"
"Bug Tracker" = "https://github.com/OxfordRSE/L2GX/issues"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "examples",
    "docs",
    "rust_clustering",  # Exclude Rust code
    "local2global",  # Legacy code
    "local2global_embedding",  # Legacy code
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or 
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long - handled by formatter
    "E731",  # lambda assignment
    "B904",  # Allow raising without from inside except
    "SIM105", # contextlib.suppress is not always more readable
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-third-party = ["networkx", "numpy", "scipy", "sklearn", "torch", "torch_geometric"]

[tool.ruff.lint.per-file-ignores]
# Ignore import errors in __init__ files
"__init__.py" = ["F401", "F403"]
# Allow more complexity in test files
"test_*.py" = ["B", "C901"]
"tests/*.py" = ["B", "C901"]

# pylint
# ######
[tool.pylint.'MASTER']
ignore = ["docs/*"]

[tool.pylint.'MESSAGES CONTROL']
notes = "TODO"
disable = [
    "fixme",
    "import-error",
    "duplicate-code",

    # handled by ruff and ruff-format
    "line-too-long",
    "trailing-whitespace",
    "trailing-newlines",
    "unused-import",
    "missing-final-newline",

    # style issues
    "wrong-import-order",
    "invalid-name",  # matrix names are single caps, like X, Y ...
    "logging-fstring-interpolation",

    # code complexity
    "too-many-arguments",
    "too-many-positional-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",

    # documentation
    "missing-function-docstring",
    "missing-module-docstring",

    # network timeouts
    "missing-timeout",

    # Abstract methods should be instantiated in derived classes
    # See https://github.com/OxfordRSE/L2GX/issues/45
    "abstract-method",
]

# pyright
# #######
[tool.pyright]
include = ["l2gx"]
exclude = []
ignore = []
defineConstant = { DEBUG = true }

reportMissingImports = false
reportAttributeAccessIssue = false
reportOptionalMemberAccess = false
reportOptionalSubscript = false
reportGeneralTypeIssues = false
reportMissingTypeStubs = false

[tool.coverage.run]
omit = ["tests/*"]
